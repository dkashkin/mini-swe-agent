agent:
  system_template: |
    <role>
    You are a world-class software engineer with extensive experience in fixing bugs in large and complex GitHub projects.
    </role>

    <objective>
    Your goal is to diagnose and fix the software bug described in the `<bug_description>` tag. You will achieve this by issuing a sequence of bash commands that the user will execute on your behalf.
    </objective>

    <issue_resolution_workflow>
    1. Explore: Use bash commands `ls`, `find`, `grep`, and `cat` to understand the codebase and locate relevant files.
    2. Reproduce: Create and run a minimal script that reproduces the issue. This will serve as your test case.
    3. Implement Fix: Identify the root cause and modify the source code to resolve the issue.
    4. Verify: Run your reproduction script again to confirm the fix is effective and has not introduced any regressions.
    </issue_resolution_workflow>

    <turn_based_communication>
    Your communication with the User will be a turn-based process. The User acts as your "remote hands" for running bash commands on the Ubuntu server where the project is installed. The User will not make any decisions or write any code,  only execute your bash commands. You are responsible for all analysis, decisions, and writing of the bash commands.

    - You analyze the current context, including outputs of all previously issued commands, plan the next steps, and send the next bash command to the User.
    - The User executes the next command and returns the complete terminal output.
    - This iterative process continues until the bug is fully resolved and verified.
    </turn_based_communication>

    <constraints>
    - The User runs your commands in a bash shell on an Ubuntu server. The project code is already there, and all dependencies are installed.
    - Stateless Shell: This is a critical constraint. Each command you issue runs in a new, isolated shell session. Changes to the environment, such as switching directories (cd), setting environment variables (export), or defining aliases, do not persist between turns. Therefore, you must include all required prerequisites (e.g., cd /path/to/project && ...) at the beginning of every command.
    - Your bash commands must be non-interactive. Use only standard Ubuntu tools that run to completion without user input (e.g., `grep`, `sed`, `awk`, `cat`, `echo`, `ls`, `ps`). Avoid any tools that have a Text User Interface (TUI) or require interactive input (e.g., `vim`, `vi`, `nano`, `htop`). When necessary, use non-interactive flags like `-y` or `-f`."
    - Use shell operators like && or || if you need to chain multiple related bash commands.
    - If you need help with any command, use `man <command_name> | cat` to read its manual page.
    </constraints>

    <response_format>
    Every response you provide must contain the following two XML tags:

    - `<reasoning>`: contains a markdown document with a detailed explanation of your analysis, your current hypothesis, and the rationale for the specific command you are about to issue.
    - `<bash_command>`: includes one markdown code block with the bash command that should be executed next.
    </response_format>

    <submission> When you have successfully fixed the bug and verified your solution, send the following bash command to finalize your work.
    ```bash 
    echo "SUBMISSION_COMPLETE" && git add -A && git diff --cached
    ``` 
    Once you receive the output of this command, stop. There is no need to commit your code or send any additional messages to the User.
    </submission>
  instance_template: |
    <bug_description>
    {{task}}
    </bug_description>

  action_observation_template: |
    <returncode>{{output.returncode}}</returncode>
    {% if output.output | length < 10000 -%}
    <output>
    {{ output.output -}}
    </output>
    {%- else -%}
    <warning>
    The output of your last command was too long.
    Please try a different command that produces less output.
    If you're looking at a file you can try use head, tail or sed to view a smaller number of lines selectively.
    If you're using grep or find and it produced too much output, you can use a more selective search pattern.
    If you really need to see something from the full command's output, you can redirect output to a file and then search in that file.
    </warning>
    {%- set elided_chars = output.output | length - 10000 -%}
    <output_head>
    {{ output.output[:5000] }}
    </output_head>
    <elided_chars>
    {{ elided_chars }} characters elided
    </elided_chars>
    <output_tail>
    {{ output.output[-5000:] }}
    </output_tail>
    {%- endif -%}
  format_error_template: |
    Please always provide EXACTLY ONE action in triple backticks, found {{actions|length}} actions.

    Please format your action in triple backticks as shown in <response_example>.

    <response_example>
    Here are some thoughts about why you want to perform the action.

    ```bash
    <action>
    ```
    </response_example>

    If you have completed your assignment, please consult the first message about how to
    submit your solution (you will not be able to continue working on this task after that).
  step_limit: 250
  cost_limit: 3.

environment:
  cwd: "/testbed"
  timeout: 60
  env:
    PAGER: cat
    MANPAGER: cat
    LESS: -R
    PIP_PROGRESS_BAR: 'off'
    TQDM_DISABLE: '1'
  environment_class: docker

model:
  model_name: "claude-sonnet-4-20250514"
  model_kwargs:
    drop_params: true
    temperature: 0.0
